org: dyadic
app: receipt-saver-be
service: rs-service

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: eu-west-2
  environment: 
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    CLIENT_URL: ${self:custom.secrets.CLIENT_URL}
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-todo-table
  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  app:
    handler: build/app.sls.server
    events:
      - http:
          path: /helloWorld
          method: get
          cors: true
      - http:
          path: /todos
          method: post
          cors: true
      - http:
          path: /todos
          method: get
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  secrets: ${file(secrets.json)}
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline
#  scriptHooks:
#    before:package:createDeploymentArtifacts: npm run build:client
#   - serverless-offline

package:
  exclude:
    - node_modules/dynamodb-localhost/**
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**
